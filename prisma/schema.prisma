generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique @db.VarChar(40)
  picture      String    @db.VarChar(100)
  family_name  String    @db.VarChar(10)
  given_name   String    @db.VarChar(15)
  isAdmin      Int?
  nickName     String?   @unique @db.VarChar(100)
  introduction String?   @db.VarChar(100)
  board        Board[]
  comment      Comment[]
  reply        Reply[]
  like         Like[]
  userImage    UserImage?
}

model Board {
  id         Int          @id @default(autoincrement())
  title      String       @db.VarChar(20)
  content    String       @db.Text
  like       Like[]
  views      Int?         @default(0)
  createdAt  DateTime     @default(now()) @map("created_at")
  comment    Comment[]
  u_id       Int
  user       User         @relation(fields: [u_id], references: [id], onDelete: Cascade)
  board_tag  Board_Tag[]
  boardImage BoardImage[]
}

model Board_Tag {
  id    Int   @id @unique @default(autoincrement())
  b_id  Int
  tagId Int
  board Board @relation(fields: [b_id], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Like {
  b_id  Int
  u_id  Int
  board Board @relation(fields: [b_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  User  @relation(fields: [u_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([b_id, u_id])
}

model Tag {
  id        Int         @id @unique @default(autoincrement())
  name      String      @unique @db.VarChar(10)
  board_tag Board_Tag[]
}

model BoardImage {
  id    Int    @unique @default(autoincrement())
  b_id  Int
  board Board  @relation(fields: [b_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url   String @unique @db.VarChar(100)
  key   String

  @@id([id, b_id])
}

model Comment {
  id        Int     @id @unique @default(autoincrement())
  commenter String  @db.VarChar(20)
  content   String  @db.VarChar(100)
  img       String
  like      Int?    @default(0)
  reply     Reply[]
  Board     Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId   Int?
  u_id      Int
  user      User    @relation(fields: [u_id], references: [id], onDelete: Cascade)
}

model Reply {
  id        Int     @unique @default(autoincrement())
  commenter String  @db.VarChar(20)
  img       String
  content   String  @db.VarChar(100)
  c_id      Int
  comment   Comment @relation(fields: [c_id], references: [id], onDelete: Cascade)
  u_id      Int
  user      User    @relation(fields: [u_id], references: [id], onDelete: Cascade)

  @@id([id, c_id])
}

model Image {
  url String @id @db.VarChar(100)
  key String
}

model UserImage {
  url String @id @db.VarChar(100)
  key String
  u_id Int @unique
  user  User?  @relation(fields: [u_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}